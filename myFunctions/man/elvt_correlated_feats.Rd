% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_preparation.R
\name{elvt_correlated_feats}
\alias{elvt_correlated_feats}
\title{Correlation based feature reduction}
\usage{
elvt_correlated_feats(df, nSubsequent = 10, corCutoff = 0.98,
  chainDrop = F, returnNamesOnly = T)
}
\arguments{
\item{df}{Master data frame with all columns. Function will filter for numeric and integer columns}

\item{nSubsequent}{Number of subsequent columns with which each column should be compared in order to reduce computation time. Defaults to 10, which seems reasonable for >0.98 cut offs}

\item{corCutoff}{Cut off value for correlation. Any pair with correlation above this will have one of it's value dropped. Defaults to 0.98}

\item{chainDrop}{Prevents a chain of variable drops reducing the information provided by variables more than intented. Look the description above for more details on this. Defaults to FALSE}

\item{returnNamesOnly}{Logical. If TRUE, returns only names to be removed. If FALSE removes data frame with all pairs meeting cutoff and suggestion on which column to remove}
}
\value{
If returnNamesOnly is TRUE, returns list of variable names to be removed     \cr 
If returnNamesOnly is FALSE, returns a dataframe with following columns   \cr  
1. V1 - Variable 1 of the pair    \cr
2. V2 - Variable 2 of the pair  \cr  
3. Correlation - Pairwise correlation between the 2 above variables \cr
4. missingMatchRate - # of rows with both variables non-missing/ # of rows with at least one variable is non-missing (internal value used)   \cr 
5. ord - Rank order sorted by correlation     \cr
6. rem - Indicator on which varaible to remove; 1 = remove variable 1, 2 = remove variable 2, 0 = do not remove either of them \cr
}
\description{
Finds highly correlated features and returns list of variables to remove. The algorithm generally picks the variable with higher missing rate to be removed from a pair. \cr
There are few of difficulties in correlation based feature reduction -  \cr  
1. \strong{Computational intensity} - With huge data as ours, it takes a long time to compute correlations of all pairs. Hence by setting the parameter "nSubsequent" for each column, we could look at only next "N" columns for comparison. With very high correlation cutoff such as 99\%, just looking at next 10 features generally covers most of the correlated variables as they tend to bunch up together. If cut off is lowered, the nSubsequent should be increased to be more effective.       \cr
2. \strong{Chain drops} - Consider scenario where variable A and B have 95\% correlation and A gets dropped, then B and C have 95\% correlation and B gets dropped too and if A and C are not that highly correlated then we might have lost information that variable A provided. By setting chainDrop as FALSE , this scenario is overcome by not dropping C instead of B while comparing B & C in above case          \cr
3. \strong{Low information overlap} - It could be possible to have very low overlap of non-missing values between variable pairs and it would be unfair to drop one of them based on correlation found in those few overlapping rows. Hence by default variable pairs are considered only if the # of rows with both variables non-missing/ # of rows with at least one variable is non-missing is >80\%  \cr
}

